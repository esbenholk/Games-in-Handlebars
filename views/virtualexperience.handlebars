<!DOCTYPE html>
<html lang="en">
	<head>
		<title>HOUSE OF KILLING</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css"  rel="stylesheet" href="style.css">
		<style>

		</style>
	</head>
	<body>
		<div id="blocker">

			<div id="instructions">
				<div class="importantNews">
				IMPORTANT IMPORTANT IMPORTANT <br/>
				IF U WANNA JOIN THE FULL MOON MEDITATION ON THURSDAY THE 7TH OF MAY<br/>
				find and follow <a class="instagramlink"href="https://www.instagram.com/jenniferanistonsuperfans/">Jennifer Aniston Superfans on Instagram<a/> where we will livestream the audio guide to the Digital Tarot Landscape™️ at 20.30 <br/>
				and we are especially proud to feature music from the incredible <a href="https://soundcloud.com/sophharkins/tracks">Sophie Harkins UK</a>
				<br/>
				look at the full moon <br/>
				continue <br/>
				continue <br/>
				continue <br/>
				<br/>

				</div>
				<!-- Move around in the Jennifer Aniston Superfans™ Digital Landcape™
				Focus in on your urgent contemplations. What is important to you? What gives you power, and negotiates your power?
				What metaphors decribe you? What season of friends ressembles your life currently?<br/>
				<br/>
				Use the crystals, the signs, your digital mobility and spiritual instinct, to discover the 3 cards that has manifested themselves in front of you.
				Each card represents u in 3 different iterations: your past with your informatics, your present with your material and your future with your navigation <br/>
				Which is which depends on how you find them, and how they relate to your urgencies.<br/>
				When you find a card- indulge in its symbolisms: recognize that it is your mirror and see that u are Jennifer Aniston, and that u r infroming your own next step.<br/>
				continue
				continue
				continue <br/> -->

				<span class="play">Click to play</span>
				<br /><br />
				Move: WASD<br/>
				Jump: SPACE<br/>
				Look: MOUSE<br/>

				<iframe class="soundcloud" width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/337216531&color=%23ff5500&auto_play=true&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true"></iframe>


			</div>

		</div>

		<script type="module">
            let imagearray = ["https://tarotcars.s3.amazonaws.com/anistonappletree.png",
			"https://tarotcars.s3.amazonaws.com/anistonbodybuilder.png",
			"https://tarotcars.s3.amazonaws.com/anistonchariot.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondeath.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondevil.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondoor.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondreamer.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonemperor.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonempress.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonfool.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhand.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhangedman.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhermit.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhierophant.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhighpriestess.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonjudgement.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonjustice.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonlovers.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmagician.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmandela.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmermaid.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmoon.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonnatureinme.jpg",
			"https://tarotcars.s3.amazonaws.com/anistononline.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonopenheart.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonopenheart.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonrazor.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonrobot.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonstar.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonstrength.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonsun.jpg",
			"https://tarotcars.s3.amazonaws.com/anistontower.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonwheeloffortune.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonworld.jpg"];

			let images=[];

				images.push(imagearray[Math.floor(Math.random() * imagearray.length)]);
				images.push(imagearray[Math.floor(Math.random() * imagearray.length)]);
				images.push(imagearray[Math.floor(Math.random() * imagearray.length)]);

			console.log(images);

			import * as THREE from '/three/build/three.module.js';

			import { PointerLockControls } from '/three/examples/jsm/controls/PointerLockControls.js';

			var camera, scene, renderer, controls, group;

			var objects = [];
			let movingtext = [];

			var raycaster;

			var moveForward = false;
			var moveBackward = false;
			var moveLeft = false;
			var moveRight = false;
			var canJump = false;

			var prevTime = performance.now();
			var velocity = new THREE.Vector3();
			var direction = new THREE.Vector3();
			var vertex = new THREE.Vector3();
			var color = new THREE.Color();


			init();
			animate();

			function init() {
                const textureLoader = new THREE.TextureLoader();
                textureLoader.crossOrigin = "Anonymous";

				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.y = 10;
				scene = new THREE.Scene();
				scene.fog = new THREE.Fog(0xff7ffc, 30, 150);
				var light = new THREE.HemisphereLight( 0xeeeeff, 0x777788, 0.75 );
				light.position.set( 0.5, 1, 0.75 );
				scene.add( light );

				controls = new PointerLockControls( camera, document.body );

				var blocker = document.getElementById( 'blocker' );
				var instructions = document.getElementById( 'instructions' );

				instructions.addEventListener( 'click', function () {
					controls.lock();
				}, false );

				controls.addEventListener( 'lock', function () {

					instructions.style.display = 'none';
					blocker.style.display = 'none';

				} );

				controls.addEventListener( 'unlock', function () {

					blocker.style.display = 'block';
					instructions.style.display = '';

				} );

				scene.add( controls.getObject() );

				var onKeyDown = function ( event ) {

					switch ( event.keyCode ) {

						case 38: // up
						case 87: // w
							moveForward = true;
							break;

						case 37: // left
						case 65: // a
							moveLeft = true;
							break;

						case 40: // down
						case 83: // s
							moveBackward = true;
							break;

						case 39: // right
						case 68: // d
							moveRight = true;
							break;

						case 32: // space
							if ( canJump === true ) velocity.y += 350;
							canJump = false;
							break;

					}

				};

				var onKeyUp = function ( event ) {

					switch ( event.keyCode ) {

						case 38: // up
						case 87: // w
							moveForward = false;
							break;

						case 37: // left
						case 65: // a
							moveLeft = false;
							break;

						case 40: // down
						case 83: // s
							moveBackward = false;
							break;

						case 39: // right
						case 68: // d
							moveRight = false;
							break;

					}

				};

				document.addEventListener( 'keydown', onKeyDown, false );
				document.addEventListener( 'keyup', onKeyUp, false );



				// floor
                function createfloor() {
                  let ground = new THREE.PlaneGeometry(1000, 1000, 100, 100);
                  ground.rotateX(-Math.PI / 2);
                  var texture = new THREE.Texture(generateTexture());
                  texture.needsUpdate = true; // important!
                  var material = new THREE.MeshBasicMaterial({
                    map: texture,
                    overdraw: 0.5,
					opacity: 0.5
                  });
                  let floor = new THREE.Mesh(ground, material);
				  floor.receiveShadow = true;
                  scene.add(floor);
                  function generateTexture() {
                    var size = 20;
                    let floorcolor = document.createElement("canvas");
                    floorcolor.width = size;
                    floorcolor.height = size;
                    // get context
                    var context = floorcolor.getContext("2d");
                    // draw gradient
                    context.rect(0, 0, size, size);
                    var gradient = context.createLinearGradient(0, 0, size, size);
                    gradient.addColorStop(0, "#00fffd"); // light blue
                    gradient.addColorStop(0.6, "#00ff21"); // dark blue
                    gradient.addColorStop(0.8, "#ffffff"); // dark blue

                    context.fillStyle = gradient;
                    context.fill();

                    return floorcolor;
                  }
                }
                createfloor();

                var boxGeometry = new THREE.BoxGeometry(50, 80, 1);

                for (let i = 0; i < images.length; i++) {

                  let boxImage, boxMaterial;

                  boxImage = textureLoader.load(images[i]);
                  boxMaterial = new THREE.MeshBasicMaterial({
                    map: boxImage
                  });
                  var box = new THREE.Mesh(boxGeometry, boxMaterial);

                  box.position.x = Math.floor(Math.random() * 20 - 10) * 50;
                  // box.position.y = Math.floor(Math.random() * 20) * 2;
                  box.position.y = 45;
                  box.position.z =  box.position.x + Math.floor(Math.random() * 20 - 10);
				  box.castShadow = true;
					box.receiveShadow = true;
                  // objects.push(box);
                  scene.add(box);
                }
				createCrystals(10, 20 );
				createCrystals(2, 100);
				function createCrystals(size, amount){
					var crystalGeometry = new THREE.OctahedronBufferGeometry( size, 1 );
					for (var i = 0; i < amount; i++) {
						let crystalImage, crystalMaterial;
						crystalImage = textureLoader.load("https://media.istockphoto.com/photos/hight-resolution-emerald-texture-picture-id157992082?k=6&m=157992082&s=170667a&w=0&h=3_xqJMTAt-DBTaeBXZVZfzdMJbtTWrz4AGc7WMYjDlM=");
	                    crystalMaterial = new THREE.MeshBasicMaterial({
	                      map: crystalImage, opacity: 0.1
	                    });

						var crystal = new THREE.Mesh(crystalGeometry, crystalMaterial);
						crystal.position.x = Math.floor(Math.random() * 20 - 10) * 50;
						// box.position.y = Math.floor(Math.random() * 20) * 2;
						crystal.position.y = 0;
						crystal.position.z = Math.floor(Math.random() * 20 - 10)*50;
						objects.push(crystal);
						scene.add(crystal);
					}
				}

				createPNGplanes(20, 40,"anistonbubblesboy.png")
				createPNGplanes(20, 40,"anistonbubblesboy.png")
				function createPNGplanes(sizex, sizey,  texture){
					var texture = new THREE.TextureLoader().load( texture);
					var geometry = new THREE.PlaneGeometry(sizex, sizey);
					var material = new THREE.MeshPhongMaterial({map: texture, color: 0xFFFFFF, });
					material.emissive.set(0x333333);
					material.shininess = 60;
					material.transparent = true
					var ldp = new THREE.Mesh(geometry, material);
					ldp.position.x = Math.floor(Math.random() * 20 - 10) * 50;
					ldp.position.y = 10;
					ldp.position.z =  ldp.position.x + Math.floor(Math.random() * 20 - 10);
					scene.add(ldp);
				}

				createOtherShapes(12, 3, 50, "https://houseofkillingwebsite.s3.amazonaws.com/aniston/tarotreading.jpg")
				createOtherShapes(50, 3, 150, "https://houseofkillingwebsite.s3.amazonaws.com/aniston/tarotreading.jpg")
				function createOtherShapes(size, amount, height, texture){
					var crystalGeometry = new THREE.OctahedronBufferGeometry( size, 4 );
					for (var i = 0; i < amount; i++) {
						let crystalImage, crystalMaterial;
						crystalImage = textureLoader.load(texture);
	                    crystalMaterial = new THREE.MeshBasicMaterial({
	                      map: crystalImage, opacity: 1
	                    });
						var crystal = new THREE.Mesh(crystalGeometry, crystalMaterial);
						crystal.position.x = Math.floor(Math.random() * 20 - 10) * 50;
						// box.position.y = Math.floor(Math.random() * 20) * 2;
						crystal.position.y = height;
						crystal.position.z = Math.floor(Math.random() * 20 - 10)*50;
						objects.push(crystal);
						scene.add(crystal);
					}
				}




				var loader = new THREE.FontLoader();
				loader.load( '/three/examples/fonts/helvetiker_regular.typeface.json', function ( font ) {

						var xMid, text;

						var color = [0xffffff, 0x00fffd, 0x00ff21, 0xeeff00, 0xfa00ff]

						let guidelines = ["navigation strategies and synesthetic reflection","loop your thought", "look around", "look forward","close your eyes", "move", "absorb signs", "absorb analogy", "u r doing great sweetie", "all my life people have been telling me, you're a shoe, you're a shoe, you're a shoe", "what if I am a hat?", "its a metaphor Daddy", "deduce meaning", "deduce self", "deduce identity", "loop your thought", "loop yourself", "quicksave as png", "duplicate layer", "i could so easily freak out right now", "i am doing good baby, how u doin?", "keep going", "turn back", "disregard the interface", "metaphorically speaking", "isn't that just kick you in the crotch fantastic?", "😍", "😍", "😍", "😍", "😍", "😍", "😍", "😍", "what would Jennifer Aniston do?", "is this a Brad situation?", "your dogs name is Clyde", "let the tower fall", "new beginnings past violent ends", "cosmic child of love for Aniston", "sometimes Jennifer", "emotional polysemy", "performative polysemy", "hollistic synergy", "spiritual ecology as mainstream standard", "conflictual polysemy", "performative polysemy", "hollistic synergy", "spiritual ecology as mainstream standard", "click on more", "human software", "spacial navigation theory", "posthuman cybernetics", "all watch over by Jennifer Aniston of loving grace", "infinite loop", "break the loop", "loop down", "look behind u", "open wide", "refuse the premise", "breath", "hold your breath", "take a deep breath","were we on a break?" ,"become the controls", "press escape to quit", "quit", "stop", "get out", "jump in", "reload page", "share"];
						for (var i = 0; i < guidelines.length; i++) {
							createText(guidelines[i]);
						}
						function createText(inputtext){
							var matDark = new THREE.LineBasicMaterial( {
								color: color[Math.floor(Math.random()*color.length)],
								side: THREE.DoubleSide
							} );

							var matLite = new THREE.MeshBasicMaterial( {
								color: color[Math.floor(Math.random()*color.length)],
								transparent: true,
								opacity: 0.4,
								side: THREE.DoubleSide
							} );
						var shapes = font.generateShapes( inputtext, Math.floor(Math.random() * 5));
						var geometry = new THREE.ShapeBufferGeometry( shapes );
						geometry.computeBoundingBox();
						xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );
						geometry.translate( xMid, 0, 0 );
						// make shape ( N.B. edge view not visible )
						text = new THREE.Mesh( geometry, matLite );
						text.position.z = Math.floor(Math.random() * 20 - 10)*50;
						text.position.x = Math.floor(Math.random() * 20 - 10)*50;
						text.position.y = Math.floor(Math.random() * 10+5);
						text.rotation.y = Math.floor(Math.random() * 10+5)*20;
						scene.add( text );
						movingtext.push(text);
						// make line shape ( N.B. edge view remains visible )
						var holeShapes = [];
						for ( var i = 0; i < shapes.length; i ++ ) {
							var shape = shapes[ i ];
							if ( shape.holes && shape.holes.length > 0 ) {
								for ( var j = 0; j < shape.holes.length; j ++ ) {
									var hole = shape.holes[ j ];
									holeShapes.push( hole );
								}
							}
						}
						shapes.push.apply( shapes, holeShapes );
						var lineText = new THREE.Object3D();
						for ( var i = 0; i < shapes.length; i ++ ) {
							var shape = shapes[ i ];
							var points = shape.getPoints();
							var geometry = new THREE.BufferGeometry().setFromPoints( points );
							geometry.translate( xMid, 0, 0 );
							var lineMesh = new THREE.Line( geometry, matDark );
							lineText.add( lineMesh );
							lineText.position.z = Math.floor(Math.random() * 20 - 10)*50;
							lineText.position.x = Math.floor(Math.random() * 20 - 10)*50;
							lineText.position.y = Math.floor(Math.random()) * 10+5;
							text.rotation.y = Math.floor(Math.random() * 10+5)*20;
						}
						scene.add( lineText );
						movingtext.push(lineText);
						}
					} );



				//


                renderer = new THREE.WebGLRenderer({
                  antialias: true,
                  alpha: true
                });
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );
                window.addEventListener( "mousemove", onDocumentMouseMove, false );
                group = new THREE.Group();
    			scene.add( group );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				requestAnimationFrame( animate );

				if ( controls.isLocked === true ) {

					raycaster.ray.origin.copy( controls.getObject().position );
					raycaster.ray.origin.y -= 10;

					var intersections = raycaster.intersectObjects( objects );

					var onObject = intersections.length > 0;

					var time = performance.now();
					var delta = ( time - prevTime ) / 1000;

					velocity.x -= velocity.x * 10.0 * delta;
					velocity.z -= velocity.z * 10.0 * delta;

					velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

					direction.z = Number( moveForward ) - Number( moveBackward );
					direction.x = Number( moveRight ) - Number( moveLeft );
					direction.normalize(); // this ensures consistent movements in all directions

					if ( moveForward || moveBackward ) velocity.z -= direction.z * 400.0 * delta;
					if ( moveLeft || moveRight ) velocity.x -= direction.x * 400.0 * delta;

					if ( onObject === true ) {

						velocity.y = Math.max( 0, velocity.y );
						canJump = true;

					}

					controls.moveRight( - velocity.x * delta );
					controls.moveForward( - velocity.z * delta );

					controls.getObject().position.y += ( velocity.y * delta ); // new behavior

					if ( controls.getObject().position.y < 10 ) {

						velocity.y = 0;
						controls.getObject().position.y = 10;

						canJump = true;

					}

					prevTime = time;

				}

				renderer.render( scene, camera );

                for (var i = 0; i < objects.length; i++) {
                  // boxes[i].rotation.y += 0.005;
                  objects[i].rotation.y += 0.003;
				  objects[i].position.y += 0.000003;
				  objects[i].scale.y += 0.00001;
				  objects[i].scale.x += 0.00001;
					objects[i].scale.z += 0.00001;
                }

				for (var i = 0; i < movingtext.length; i++) {
					movingtext[i].rotation.y += 0.003;
				}
			}

            var selectedObject = null;
		    function onDocumentMouseMove( event ) {
    			event.preventDefault();
    			if ( selectedObject ) {
    				// selectedObject.material.color.set( '#69f' );
                    console.log("object", selectedObject);
    				selectedObject = null;
    			}

    			var intersects = getIntersects( event.layerX, event.layerY );
    			if ( intersects.length > 0 ) {
    				var res = intersects.filter( function ( res ) {
    					return res && res.object;
    				} )[ 0 ];

    				if ( res && res.object ) {
    					selectedObject = res.object;
    					// selectedObject.material.color.set( '#f00' );
                        console.log("object", selectedObject);
    				}

    			}

		    }
            var raycaster = new THREE.Raycaster();
		    var mouseVector = new THREE.Vector3();
            // raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 10 );

    		function getIntersects( x, y ) {

    			x = ( x / window.innerWidth ) * 2 - 1;
    			y = - ( y / window.innerHeight ) * 2 + 1;

    			mouseVector.set( x, y, 0.5 );
    			raycaster.setFromCamera( mouseVector, camera );

    			return raycaster.intersectObject( group, true );

    		}

		</script>
	</body>
</html>
