<!DOCTYPE html>
<html lang="en">
	<head>
		<title>HOUSE OF KILLINH</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="style.css">
		<style>

		</style>
	</head>
	<body>
		<div id="blocker">

			<div id="instructions">

				Move around in the Jennifer Aniston Superfans™ Digital Landcape™ <br/>
				Focus in on your urgent contemplations. What is important to you? What gives you power, and negotiates your power?
				What metaphors decribe you? What season of friends ressembles your life currently?<br/>
				<br/>
				Use the crystals, the signs, your digital mobility and spiritual instinct, to discover the 3 cards that has manifested themselves in front of you.
				Each card represents u in 3 different iterations: your past with your informatics, your present with your material and your future with your navigation <br/>
				Which is which depends on how you find them, and how they relate to your urgencies.<br/>
				When you find a card- indulge in its symbolisms: recognize that it is your mirror and see that u are Jennifer Aniston, and that u r infroming your own next step.<br/>
				continue
				continue
				continue <br/>

				<span class="play">Click to play</span>
				<br /><br />
				Move: WASD<br/>
				Jump: SPACE<br/>
				Look: MOUSE<br/>


			</div>

		</div>

		<script type="module">
            let imagearray = ["https://tarotcars.s3.amazonaws.com/anistonappletree.png",
			"https://tarotcars.s3.amazonaws.com/anistonbodybuilder.png",
			"https://tarotcars.s3.amazonaws.com/anistonchariot.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondeath.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondevil.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondoor.jpg",
			"https://tarotcars.s3.amazonaws.com/anistondreamer.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonemperor.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonempress.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonfool.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhand.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhangedman.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhermit.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhierophant.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonhighpriestess.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonjudgement.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonjustice.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonlovers.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmagician.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmandela.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmermaid.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonmoon.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonnatureinme.jpg",
			"https://tarotcars.s3.amazonaws.com/anistononline.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonopenheart.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonopenheart.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonrazor.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonrobot.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonstar.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonstrength.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonsun.jpg",
			"https://tarotcars.s3.amazonaws.com/anistontower.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonwheeloffortune.jpg",
			"https://tarotcars.s3.amazonaws.com/anistonworld.jpg"];

			let images=[];

				images.push(imagearray[Math.floor(Math.random() * imagearray.length)]);
				images.push(imagearray[Math.floor(Math.random() * imagearray.length)]);
				images.push(imagearray[Math.floor(Math.random() * imagearray.length)]);

			console.log(images);

			import * as THREE from '/three/build/three.module.js';

			import { PointerLockControls } from '/three/examples/jsm/controls/PointerLockControls.js';

			var camera, scene, renderer, controls, group;

			var objects = [];

			var raycaster;

			var moveForward = false;
			var moveBackward = false;
			var moveLeft = false;
			var moveRight = false;
			var canJump = false;

			var prevTime = performance.now();
			var velocity = new THREE.Vector3();
			var direction = new THREE.Vector3();
			var vertex = new THREE.Vector3();
			var color = new THREE.Color();


			init();
			animate();

			function init() {
                const textureLoader = new THREE.TextureLoader();
                textureLoader.crossOrigin = "Anonymous";

				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.y = 10;
				scene = new THREE.Scene();
				scene.fog = new THREE.Fog(0xff7ffc, 30, 90);
				var light = new THREE.HemisphereLight( 0xeeeeff, 0x777788, 0.75 );
				light.position.set( 0.5, 1, 0.75 );
				scene.add( light );

				controls = new PointerLockControls( camera, document.body );

				var blocker = document.getElementById( 'blocker' );
				var instructions = document.getElementById( 'instructions' );

				instructions.addEventListener( 'click', function () {
					controls.lock();
				}, false );

				controls.addEventListener( 'lock', function () {

					instructions.style.display = 'none';
					blocker.style.display = 'none';

				} );

				controls.addEventListener( 'unlock', function () {

					blocker.style.display = 'block';
					instructions.style.display = '';

				} );

				scene.add( controls.getObject() );

				var onKeyDown = function ( event ) {

					switch ( event.keyCode ) {

						case 38: // up
						case 87: // w
							moveForward = true;
							break;

						case 37: // left
						case 65: // a
							moveLeft = true;
							break;

						case 40: // down
						case 83: // s
							moveBackward = true;
							break;

						case 39: // right
						case 68: // d
							moveRight = true;
							break;

						case 32: // space
							if ( canJump === true ) velocity.y += 350;
							canJump = false;
							break;

					}

				};

				var onKeyUp = function ( event ) {

					switch ( event.keyCode ) {

						case 38: // up
						case 87: // w
							moveForward = false;
							break;

						case 37: // left
						case 65: // a
							moveLeft = false;
							break;

						case 40: // down
						case 83: // s
							moveBackward = false;
							break;

						case 39: // right
						case 68: // d
							moveRight = false;
							break;

					}

				};

				document.addEventListener( 'keydown', onKeyDown, false );
				document.addEventListener( 'keyup', onKeyUp, false );



				// floor
                function createfloor() {
                  let ground = new THREE.PlaneGeometry(1000, 1000, 100, 100);
                  ground.rotateX(-Math.PI / 2);
                  var texture = new THREE.Texture(generateTexture());
                  texture.needsUpdate = true; // important!
                  var material = new THREE.MeshBasicMaterial({
                    map: texture,
                    overdraw: 0.5
                  });
                  let floor = new THREE.Mesh(ground, material);
                  scene.add(floor);
                  function generateTexture() {
                    var size = 20;
                    let floorcolor = document.createElement("canvas");
                    floorcolor.width = size;
                    floorcolor.height = size;
                    // get context
                    var context = floorcolor.getContext("2d");
                    // draw gradient
                    context.rect(0, 0, size, size);
                    var gradient = context.createLinearGradient(0, 0, size, size);
                    gradient.addColorStop(0, "#00fffd"); // light blue
                    gradient.addColorStop(0.6, "#f390ff"); // dark blue
                    gradient.addColorStop(0.8, "#00ffe6"); // dark blue

                    context.fillStyle = gradient;
                    context.fill();

                    return floorcolor;
                  }
                }
                createfloor();

                var boxGeometry = new THREE.BoxGeometry(50, 80, 1);

                for (let i = 0; i < images.length; i++) {

                  let boxImage, boxMaterial;

                  boxImage = textureLoader.load(images[i]);
                  boxMaterial = new THREE.MeshBasicMaterial({
                    map: boxImage
                  });
                  var box = new THREE.Mesh(boxGeometry, boxMaterial);

                  box.position.x = Math.floor(Math.random() * 20 - 10) * 50;
                  // box.position.y = Math.floor(Math.random() * 20) * 2;
                  box.position.y = 45;
                  box.position.z =  box.position.x + Math.floor(Math.random() * 20 - 10);
                  // objects.push(box);
                  scene.add(box);
                }
				createCrystals(10, 20 );
				createCrystals(2, 100);
				function createCrystals(size, number){
					var crystalGeometry = new THREE.OctahedronBufferGeometry( size, 1 );
					for (var i = 0; i < number; i++) {
						let crystalImage, crystalMaterial;
						crystalImage = textureLoader.load("https://media.istockphoto.com/photos/seamless-crystal-texture-picture-id509725779");
	                    crystalMaterial = new THREE.MeshBasicMaterial({
	                      map: crystalImage, opacity: 0.8
	                    });
						crystalMaterial.alphaMap
						var crystal = new THREE.Mesh(crystalGeometry, crystalMaterial);
						crystal.position.x = Math.floor(Math.random() * 20 - 10) * 50;
						// box.position.y = Math.floor(Math.random() * 20) * 2;
						crystal.position.y = 0;
						crystal.position.z = Math.floor(Math.random() * 20 - 10)*50;
						objects.push(crystal);
						scene.add(crystal);
					}
				}


				//


                renderer = new THREE.WebGLRenderer({
                  antialias: true,
                  alpha: true
                });
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );
                window.addEventListener( "mousemove", onDocumentMouseMove, false );
                group = new THREE.Group();
    			scene.add( group );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				requestAnimationFrame( animate );

				if ( controls.isLocked === true ) {

					raycaster.ray.origin.copy( controls.getObject().position );
					raycaster.ray.origin.y -= 10;

					var intersections = raycaster.intersectObjects( objects );

					var onObject = intersections.length > 0;

					var time = performance.now();
					var delta = ( time - prevTime ) / 1000;

					velocity.x -= velocity.x * 10.0 * delta;
					velocity.z -= velocity.z * 10.0 * delta;

					velocity.y -= 9.8 * 100.0 * delta; // 100.0 = mass

					direction.z = Number( moveForward ) - Number( moveBackward );
					direction.x = Number( moveRight ) - Number( moveLeft );
					direction.normalize(); // this ensures consistent movements in all directions

					if ( moveForward || moveBackward ) velocity.z -= direction.z * 400.0 * delta;
					if ( moveLeft || moveRight ) velocity.x -= direction.x * 400.0 * delta;

					if ( onObject === true ) {

						velocity.y = Math.max( 0, velocity.y );
						canJump = true;

					}

					controls.moveRight( - velocity.x * delta );
					controls.moveForward( - velocity.z * delta );

					controls.getObject().position.y += ( velocity.y * delta ); // new behavior

					if ( controls.getObject().position.y < 10 ) {

						velocity.y = 0;
						controls.getObject().position.y = 10;

						canJump = true;

					}

					prevTime = time;

				}

				renderer.render( scene, camera );

                for (var i = 0; i < objects.length; i++) {
                  // boxes[i].rotation.y += 0.005;
                  objects[i].rotation.y += 0.003;
                }

			}

            var selectedObject = null;
		    function onDocumentMouseMove( event ) {
    			event.preventDefault();
    			if ( selectedObject ) {
    				// selectedObject.material.color.set( '#69f' );
                    console.log("object", selectedObject);
    				selectedObject = null;
    			}

    			var intersects = getIntersects( event.layerX, event.layerY );
    			if ( intersects.length > 0 ) {
    				var res = intersects.filter( function ( res ) {
    					return res && res.object;
    				} )[ 0 ];

    				if ( res && res.object ) {
    					selectedObject = res.object;
    					// selectedObject.material.color.set( '#f00' );
                        console.log("object", selectedObject);
    				}

    			}

		    }
            var raycaster = new THREE.Raycaster();
		    var mouseVector = new THREE.Vector3();
            // raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 10 );

    		function getIntersects( x, y ) {

    			x = ( x / window.innerWidth ) * 2 - 1;
    			y = - ( y / window.innerHeight ) * 2 + 1;

    			mouseVector.set( x, y, 0.5 );
    			raycaster.setFromCamera( mouseVector, camera );

    			return raycaster.intersectObject( group, true );

    		}

		</script>
	</body>
</html>
