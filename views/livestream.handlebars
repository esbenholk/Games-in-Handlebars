<!DOCTYPE html>
<html lang="en">
	<head>
		<title>JOIN THE JOINT</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<link type="text/css" rel="stylesheet" href="livestreamstyle.css">

		<style>

		</style>

	</head>
	<body>
		<div class="page">
			<div id="logoes">
				<img class="logo" id="four42020" src="teletubby/42020.png"/>
				<div id="cluster-felt">
					<a href="http://clusterduck.space/">
					<img class="logo" id="clusterducklogo" src="teletubby/ClusterduckLogo.png"/>
					</a>
					<div class="pankefelt">
					<a href="https://news.feltzine.us/">
						<img class="logo" id="feltzine" src="teletubby/feltzine.png"/>
					</a>
					<a href="https://www.panke.gallery/">
						<img class="logo" id="panke" src="teletubby/panke.png"/>
					</a>
					</div>
				</div>
			</div>
			<div id="joint">
				<div class="jointparts suncontainer" >
			     <img class="jointfront jointparts sunpart" src="teletubby/top.png" alt="hiiiiiigh" />
				 </div>
		        <div id="container" class="jointparts"></div>
		        <img id="jointback" class="jointparts" src="teletubby/bottom.png" alt="hi" />
			</div>
		</div>
		<div id="chatcontainer">
			<img src="teletubby/chatbutton.png" id="chattoggle"/>
	        <div id="chat" class="invisible">
	            	<ul id="messages"></ul>
	                <form action="" id="chatform" >
	                  <input id="m" autocomplete="off" /><button id="chatbutton"><img class="chattoggle" src="teletubby/send-button.png"</button>
	                </form>
	        </div>
		</div>


		<div id="tickercontainer">
			<img id="tickerpng" class="credits-png" src="/teletubby/credits.png"/>
		</div>


		<div id="blocker">
			<div id="instructions">
				<div id="inputform">
			        <h1 id="space">
			          <img id="name-your-space" src="/teletubby/name-your-space.png"/>
			          <input
			            type="text"
			            id="room-id"
			            value="420"
			            autocorrect="off"
			            autocapitalize="off"
			            size="20"
			          />
			        </h1>
			        <div class="buttons">
					<img class="button" src="teletubby/openroomfull.png" id="btn-open-room"/>
					<img class="button" src="teletubby/joinroomfull.png" id="btn-join-room"/>
			        </div>
		        </div>
				<img id="coverpic" src="Join-the-Joint.png"/>
			</div>
			<div id="particles-js" ></div>
		</div>



<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script src="https://rtcmulticonnection.herokuapp.com/dist/RTCMultiConnection.min.js"></script>
<script src="https://rtcmulticonnection.herokuapp.com/socket.io/socket.io.js"></script>
<script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

<script type="module">
var blocker = document.getElementById( 'blocker' );
var instructions = document.getElementById( 'instructions' );
var inputform = document.getElementById('inputform');


var connection = new RTCMultiConnection();
connection.socketURL = 'https://rtcmulticonnection.herokuapp.com:443/';
connection.session = {
    audio: true,
    video: true
};

connection.sdpConstraints.mandatory = {
    OfferToReceiveAudio: true,
    OfferToReceiveVideo: true
};

let teletubbies = ["teletubby/rosa.png", "teletubby/blu.png", "teletubby/verde.png", "teletubby/giallo.png"]
connection.onstream = function(event) {
    let container =document.getElementById('container');
	let img = document.createElement("img");


	img.src = teletubbies[Math.floor(Math.random() * teletubbies.length)];

	if(img.src.includes("rosa.png")){
		event.mediaElement.classList.add("rosa");
		// mutebutton.style.backgroundColor = "red";
	} else if (img.src.includes("blu.png")){
		event.mediaElement.classList.add("blue");
		// mutebutton.style.backgroundColor = "blue"
	} else if (img.src.includes("verde.png")){
		event.mediaElement.classList.add("green");
		// mutebutton.style.backgroundColor = "green"
	} else {
		event.mediaElement.classList.add("yellow");
		// mutebutton.style.backgroundColor = "yellow"
	}
	event.mediaElement.classList.add("video");

	img.classList.add("teletubby");

	let videoelement = document.createElement("div");
	videoelement.classList.add("videoelement");
	videoelement.appendChild( event.mediaElement );

	videoelement.appendChild(img);
	container.appendChild(videoelement)



};

connection.onstreamended = function(event) {
  var mediaElement = document.getElementById(event.streamid);
  if (mediaElement) {
	console.log(mediaElement.parentNode);
	mediaElement.parentNode.parentNode.removeChild(mediaElement.parentNode);
  }
};



document.getElementById('btn-open-room').onclick = function() {
    // this.disabled = true;
	var predefinedRoomId = document.getElementById('room-id').value;
	instructions.style.display = 'none';
	blocker.style.display = 'none';
    connection.open( predefinedRoomId, function(
	  isRoomOpened,
	  roomid,
	  error
	) {
		if (error === "Room not available") {
		  let otherRoomId = prompt(
			"it looks like this room already exist - click okay to join the room where your virtual stoners already are", roomid
		  );
		  connection.join( otherRoomId, function(
	  	  isRoomOpened,
	  	  roomid,
	  	  error
	  	) {

	  		  return;


	  	  }
	  	);
		  return;
		}

	  }
	);
};
document.getElementById('btn-join-room').onmouseover = function(){
this.setAttribute("src","/teletubby/joinroomempty.png");
}
document.getElementById('btn-open-room').onmouseover = function(){
this.setAttribute("src","/teletubby/openroomempty.png");
}
document.getElementById('btn-join-room').onmouseleave = function(){
this.setAttribute("src","/teletubby/joinroomfull.png");
}
document.getElementById('btn-open-room').onmouseleave = function(){
this.setAttribute("src","/teletubby/openroomfull.png");
}



document.getElementById('btn-join-room').onclick = function() {

	var predefinedRoomId = document.getElementById('room-id').value;
    // this.disabled = true;
	instructions.style.display = 'none';
	blocker.style.display = 'none';
    connection.join( predefinedRoomId, function(
	  isRoomOpened,
	  roomid,
	  error
	) {
		if (error === "Room not available") {
		  let otherRoomId = prompt(
			"it looks like this room doesnt exist yet and u r alone - click okay to open a new room for your friends", roomid
		  );
		  connection.open( otherRoomId, function(
	  	  isRoomOpened,
	  	  roomid,
	  	  error
	  	) {

	  		  return;


	  	  }
	  	);
		  return;
		}

	  }
	);
};


document.getElementById("coverpic").addEventListener( 'click', function () {
    document.getElementById("coverpic").style.display = 'none';
	inputform.style.display ="inline-block";

});
document.getElementById("joint").addEventListener('click', function (target) {
	if(target.srcElement.children[0]){
		if(target.srcElement.children[0].children[0].id.length>2){
			let currentStream = document.getElementById(target.srcElement.children[0].children[0].id)
			if(currentStream.muted === false){
				currentStream.muted =true;
				currentStream.volume = 0;

			} else{
				currentStream.muted = false;
				currentStream.volume = 1;

			}
		}
	}




});
let chatbox = document.getElementById("chat");

document.getElementById("chattoggle").onclick = function(){

	if(chatbox.classList.contains("invisible")){
		chatbox.classList.add("visible");
		chatbox.classList.remove("invisible");
	} else{
		chatbox.classList.remove("visible");
		chatbox.classList.add("invisible");
	}

}




$(function () {
    var socket = io();
    $('form').submit(function(e) {
      e.preventDefault(); // prevents page reloading
      socket.emit('chatmessage', $('#m').val());
      $('#m').val('');
      return false;
    });
    socket.on('chatmessage', function(msg){
      $('#messages').append($('<li>').text(msg));
    });
    socket.on("livestream", function(stream){
        console.log("stream recieved frontend");
        var video2 = document.getElementById("video2");
        video2.srcObject = stream;

    })
  });



	var image = "/teletubby/png/weedleaf03.png";
    let images = ["/teletubby/png/weedleaf02.png", "/teletubby/png/butt.png", "/teletubby/png/cappi.png",
"/teletubby/png/clusterlogo.png", "/teletubby/png/dick.png", "/teletubby/png/dolphin.png","/teletubby/png/duck.png", "/teletubby/png/joint.png", "/teletubby/png/smiley.png",
"/teletubby/png/tomato.png", "/teletubby/png/weedleaf.png"];

    changeImage();

    function changeImage() {
		image = images[Math.floor(Math.random() * images.length)];
        const particlesJSON = {
          particles: {
            number: {
              value: 80,
              density: {
                enable: false,
                value_area: 8049.305944649181
              }
            },
            color: {
              value: "#4aff9f"
            },
            shape: {
              type: "image",
              stroke: {
                width: 0.7,
                color: "rgba(26, 102, 255, 0.2)"
              },
              polygon: {
                nb_sides: 9
              },
              image: {
                src: image,
                width: 130,
                height: 130
              }
            },
            opacity: {
              value: 0.1,
              random: false,
              anim: {
                enable: false,
                speed: 1,
                opacity_min: 0.1,
                sync: false
              }
            },
            size: {
              value: 20,
              random: true,
              anim: {
                enable: false,
                speed: 40,
                size_min: 0.1,
                sync: false
              }
            },
            line_linked: {
              enable: false,
              distance: 100,
              color: "6200ff",
              opacity: 10,
              width: 0
            },
            move: {
              enable: true,
              speed: 5,
              direction: "none",
              random: false,
              straight: false,
              out_mode: "out",
              bounce: false,
              attract: {
                enable: true,
                rotateX: 1362.9002517356944,
                rotateY: 8818.766334760376
              }
            }
          },
          interactivity: {
            detect_on: "canvas",
            events: {
              onhover: {
                enable: false,
                mode: "grab"
              },
              onclick: {
                enable: true,
                mode: "bubble"
              },
              resize: true
            },
            modes: {
              grab: {
                distance: 400,
                line_linked: {
                  opacity: 1
                }
              },
              bubble: {
                distance: 500,
                size: 25,
                duration: 4,
                opacity: 0.5,
                speed: 100
              },
              repulse: {
                distance: 200,
                duration: 0.4
              },
              push: {
                particles_nb: 4
              },
              remove: {
                particles_nb: 2
              }
            }
          },
          retina_detect: false
        };


        particlesJS("particles-js", particlesJSON);
      setTimeout(function() {

        changeImage();
	}, 4000);
    }









		</script>
	</body>
</html>
